plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

// Para poder usar Kapt en el proyecto
// apply plugin: 'kotlin-kapt'

group 'dev.joseluisgs'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
}

// Configuración de la codificación de los ficheros
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Configuración de la aplicación, modulo y clase principal para ser lanzada
application {
    mainModule = 'dev.joseluisgs.moscafx'
    mainClass = 'dev.joseluisgs.moscafx.MoscaApplication'
}

// Configuración de compilación de Kotlin
kotlin {
    jvmToolchain(21)
}

// Configuración de JavaFX
javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {

    // Logger
    implementation("org.lighthousegames:logging:1.3.0")
    implementation("ch.qos.logback:logback-classic:1.4.14")

    // Result
    implementation("com.michael-bull.kotlin-result:kotlin-result:2.0.0")

    // Open Brwoser
    implementation("com.vaadin:open:8.5.0")

    // Koin
    implementation(platform("io.insert-koin:koin-bom:3.5.6"))
    implementation("io.insert-koin:koin-core") // Core
    
    // Test JUnit
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

// Para poder usar Junit 5
test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

// Para construir un JAR con todas las dependencias
tasks.jar {
    manifest {
        attributes 'Main-Class': 'dev.joseluisgs.starwarsfx.MoscaApplication'
    }

    from {
        configurations["compileClasspath"].collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


